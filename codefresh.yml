version: "1.0"
stages:
  - "clone"
  - "build"
  - "test"
  - "build"
  - "test"
  - "approval"
  - "package"
  - "deploy"
  - "notify"
steps:
  main_clone:
    title: "Cloning Main Repository"
    type: "git-clone"
    stage: clone
    repo: "rkemery/codefresh-demo"
    revision: "${{CF_BRANCH}}"
    git: "github"
  compile:
    title: "Building Demo App"
    type: "freestyle" 
    image: "rust:latest" 
    working_directory: "." 
    environment:
      - CARGO_HOME=/codefresh/volume/cargo
    commands:
      - "cargo build"
    stage: "build"    
  test:
    title: "Running Unit Test"
    type: "freestyle" 
    image: "rust:latest" 
    working_directory: "." 
    environment:
      - CARGO_HOME=/codefresh/volume/cargo    
    commands:
      - "cargo run &"
      - "cargo test"
    stage: "test"
  build_demo_app_test:
    title: "Build for Test"
    type: build
    stage: build
    image_name: rkemery/codefresh-demo
    no_cache: false
    dockerfile: Dockerfile.test
    working_directory: '.'
    tag: "test"
    registry: dockerhub
    when:
      condition:
        all:
            noSkipCiInCommitMessage: |
                includes(lower("${{CF_COMMIT_MESSAGE}}"), "--skip-ci") == false
  demo_app_integration_test:
    title: "Integration Test"
    stage: test
    image: '${{build_demo_app_test}}'
    commands:
      - 'curl http://app:8000/health'
    services:
      composition:
        app:
          image: '${{build_demo_app_test}}'
          ports:
            - 8000 
      composition_candidates:
        app_cargo:
          image: '${{build_demo_app_test}}'
          working_dir: '.'
          command: 'cargo test'
  approval:
    type: pending-approval
    stage: approval
    title: "Approval from Test"
    description: "Approval Step"
    timeout:
      duration: 2
      finalState: approved
    when:
      branch:
        only: [ main ]
  build_demo_app:
    title: "Build Demo Rust App"
    type: build
    stage: package
    image_name: rkemery/codefresh-demo
    no_cache: false
    dockerfile: Dockerfile
    working_directory: '.'
    tag: "${{CF_BRANCH}}"
    registry: dockerhub
  deploy_to_k8s:
    title: "Deploy Demo Rust App to k8s"
    type: deploy
    stage: deploy
    kind: kubernetes  
    ## cluster name as the shown in account's integration page
    cluster:  rkemery-gke-cluster-01@rkemery-k8s
    # desired namespace
    namespace: default
    service: codefresh-demo
    candidate:
      # The image that will replace the original deployment image 
      # The image that been build using Build step
      image: rkemery/codefresh-demo:${{CF_BRANCH}}
      # The registry that the user's Kubernetes cluster can pull the image from
      # Codefresh will generate (if not found) secret and add it to the deployment so the Kubernetes master can pull it
      registry: dockerhub   
  slack_notify:
    title: "Slack"
    stage: "notify"
    type: slack-notifier
    arguments:
      SLACK_HOOK_URL: "${{SLACK_WEB_URL}}"
      SLACK_TEXT: "${{SLACK_MESSAGE}}"