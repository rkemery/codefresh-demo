version: "1.0"
stages:
  - "checkout"
  - "package"
  - "test"
  - "deploy"
steps:
  main_clone:
    title: "Cloning Main Repository"
    stage: checkout
    type: "git-clone"
    repo: "rkemery/codefresh-demo"
    revision: "${{CF_BRANCH}}"
    git: "github"
  build_demo_app:
    title: "Building Docker Image - Demo Rust App"
    type: build
    stage: package
    image_name: rkemery/codefresh-demo
    no_cache: false
    dockerfile: Dockerfile
    working_directory: '.'
    tag: "${{CF_BRANCH}}"
    registry: dockerhub
  build_demo_app_test:
    title: "Building Docker Image for Testing - Demo Rust App"
    type: build
    stage: package
    image_name: rkemery/codefresh-demo
    no_cache: false
    dockerfile: Dockerfile.test
    working_directory: '.'
    tag: "test"
    registry: dockerhub
  unit_test:
    title: "Unit Test - Demo Rust App"
    stage: test
    image: "${{build_demo_app_test}}"
    command: 'cat /tmp/result.txt'
  integration_test:
    type: composition
    stage: test
    title: "Integration Test - Demo Rust App"
    description: "Temporary Test Environment"
    composition:
      version: '3'
      services:
        app:
          image: "${{build_demo_app}}"
          ports:
           - 8000
          command: 'netstat -an'
    composition_candidates:
      test_service: 
        image: "${{build_demo_app}}"
        links:
          - app
        command: 'netstat -an'
  deploy_to_k8s:
    title: "Deploy Demo Rust App to k8s"
    type: deploy
    stage: deploy
    kind: kubernetes  
    ## cluster name as the shown in account's integration page
    cluster:  rkemery-gke-cluster-01@rkemery-k8s
    # desired namespace
    namespace: default
    service: codefresh-demo
    candidate:
      # The image that will replace the original deployment image 
      # The image that been build using Build step
      image: rkemery/codefresh-demo:${{CF_BRANCH}}
      # The registry that the user's Kubernetes cluster can pull the image from
      # Codefresh will generate (if not found) secret and add it to the deployment so the Kubernetes master can pull it
      registry: dockerhub   
    hooks: 
      on_finish:
       exec:
         image: tutum/curl
         commands:
           - curl -X POST --data-urlencode 'payload={"text":"Code Fresh Demo App Deployment to k8s Successful"}' ${SLACK_WEB_URL}